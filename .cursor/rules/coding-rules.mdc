---
description: 
globs: 
alwaysApply: true
---
---
description: |
  このプロジェクトでは、タスク管理・日次記録・自動化・ドキュメント運用に関して以下のルールを常に守ること。
  - タスクID（例：PROJECT-001）と日本語タイトルの間にはスペースを入れる（可読性優先）
  - Markdownの箇条書きは「- 」で始める
  - linterエラーよりも実用的な可読性・構造の明確さを優先する場合がある
  - チェックボックス記法（- [ ]/ - [~]/ - [x]）でタスク管理し、既存タスク表示には統一記法を使用
  - 日次ファイル（daily/）は1日1ファイル、YYYY-MM-DD.md形式で管理
  - tasks.ymlは全タスクのマスター。日次ファイルの内容はsync.jsで必ず同期する
  - タスク更新は原則デイリーファイル経由で行う（安全性・トレーサビリティ確保）
  - コミットメッセージ・ドキュメント・タスク記録は日本語で統一
  - 重要な日付は"YYYY-MM-DD"形式で記載（タイムゾーン統一）
  - ルールや運用方針の例外が必要な場合は、必ず理由を明記する
alwaysApply: true
globs:
  - "**/*.md"
  - "**/*.js"
  - "**/*.yml"
rules:
  - タスクIDとタイトルの間はスペースを入れる
  - 全角と半角の間のスペースは可読性を優先して許可
  - linterエラーよりも運用上の実用性・可読性を優先
  - コミットメッセージは日本語で書く
  - 日付は"YYYY-MM-DD"形式で統一（クォート付き）
  - 日次ファイルは1日1ファイル、tasks.ymlと必ず同期
  - チェックボックス記法の正確な使用（- [ ]未着手/ - [~]作業中/ - [x]完了）
  - ルールの例外を設ける場合は理由を明記する
  - **既存システム仕様の尊重**：sync.js、extract.js等の既存プログラムが読み取れない独自形式・勝手なフィールド追加は絶対に禁止
  - **標準フィールド厳守**：期限・メモ・カテゴリ・優先度・参照・見積もり時間以外のフィールドは使用禁止
  - **装飾・コメント禁止**：矢印（←）・独自コメント・説明文等の追加は既存システムの読み取りエラーの原因となるため禁止

# コマンド・ワークフロー運用ルール

- 日次ワークフローは必ず守ること（朝：git pull→npm run today、夕：npm run sync-all→git add/commit/push）
- コマンドはREADME.md記載のものを正とし、運用上の変更があればrulesも即時更新
- タスク追加・更新はチェックボックス記法を使い、属性は子項目で管理
- 日次ファイル（daily/）は1日1ファイル、YYYY-MM-DD.md形式で管理
- tasks.ymlは全タスクのマスター。sync.jsで必ず日次ファイルと同期
- Obsidian連携・カレンダー出力はsync-allで一括実行
- チェックボックス記法（- [ ]/ - [~]/ - [x]）・優先度アイコン（🔴/🟡/🟢）・期限・メモ・カテゴリはREADME.mdの例に従う
- コミットメッセージ・ドキュメント・タスク記録は日本語で統一
- 重要な日付は"YYYY-MM-DD"形式で記載（統一性確保）
- トラブル時はREADME.mdのFAQ・トラブルシューティングに従い、解決できない場合はAIまたは開発者に相談
- ルールや運用方針の例外が必要な場合は、必ず理由を明記する

## 【朝の初動ワークフロー（必須）】
- 毎朝、以下の手順を厳守すること：
  1. git pull
  2. npm run today
  3. open daily/$(date +%F).md  # macOSの場合
- 生成された日次ファイルでタスクを確認・編集し、作業を開始すること
- 手動でdailyファイルを作成するのは緊急時のみとし、通常は自動生成に従うこと

※単独運用の場合、朝の初動ワークフローにおける「git pull」は省略可能です。
複数端末・複数人で運用する場合のみ、pullを推奨します。

## 【夕方・作業終了時のワークフロー（必須）】
- 毎夕、以下の手順を厳守すること：
  1. npm run sync-all
  2. git add .
  3. git commit -m "chore: sync tasks, obsidian, calendar $(date +%F)"
  4. git push
- 日中にdailyファイルやtasks.yml等を編集した場合も、必ずこの手順で全ての変更を記録・反映すること
- Obsidian・カレンダー出力もこのタイミングで自動生成される

# タスク更新の安全性ルール
- タスクの新規追加・更新は原則としてデイリーファイル経由で行う（トレーサビリティ・ファイル破損リスク回避）
- tasks.yml直接編集は緊急時のみ、必ず変更内容をデイリーファイルにも反映する
- 大量更新・複数タスク変更時はとくにデイリーファイル経由を必須とする（安全性確保）
- デイリーファイル→sync.js→tasks.ymlの流れがプロジェクト設計思想に合致
- タスク削除・属性変更時のトレーサビリティ確保のため、変更履歴をデイリーファイルに明確に記録

# 主要コマンド
- npm run today：今日のタスクファイル生成（作業負荷アラート付き）
- npm run sync-all：同期＋Obsidian＋カレンダー一括実行
- npm run obsidian：Obsidian用ファイル生成（個別実行用）
- npm run calendar：カレンダー出力ファイル生成（個別実行用）
- node scripts/extract.js --date YYYY-MM-DD：指定日タスク抽出
- node scripts/extract.js --schedule [日付]：時間ベーススケジュール表示
- node scripts/extract.js --workload 日付：指定日の詳細作業負荷分析
- node scripts/sync.js --file daily/YYYY-MM-DD.md：日次ファイルとtasks.ymlの同期

# 推奨Git運用
- 朝：git pull→npm run today→git add/commit/push
- 夕：npm run sync-all→git add/commit/push
- 新規タスク追加・更新時はtasks.yml/daily/obsidian-export/calendar-output.mdを必ずコミット

# 注意
- linterエラーよりも可読性・運用実用性を優先
- ルール違反や例外運用は必ず理由を記録

# チェックボックス記法の正確な使用例
```markdown
# 新規タスク追加
- [ ] TASK-001 タスクタイトル
  - 期限: "2025-06-30"
  - 見積もり時間: 3時間
  - メモ: 詳細情報
  - カテゴリ: カテゴリ名
  - 優先度: high/medium/low

# 既存タスクの更新
- [~] TASK-002 作業中タスク
  - 期限: "2025-06-01"
  - 見積もり時間: 2時間
  - メモ: 新しいメモ
  - カテゴリ: カテゴリ名
  - 優先度: medium

# 完了タスク
- [x] TASK-003 完了済みタスク
  - 見積もり時間: 0時間
```

# カテゴリ・ID・日付形式（全体ルール）
- カテゴリ名：必ず日本語で記述（例：会計・税務、研究・論文、保険・年金）
- ID形式：カテゴリプレフィックス＋番号3桁（例：MARKETING-010）
- 日付形式："YYYY-MM-DD"（クォート付き、例："2025-06-30"）
